# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQdbfRQRwe2xg7CCzJJSNBciNuQ_DG7y
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

st.set_page_config(page_title="Amazon Sales Analyzer", layout="wide")
st.title("📦 Amazon Product Popularity Classifier")

# Upload CSV
uploaded_file = st.file_uploader("Upload Amazon CSV File", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # --- Cleaning ---
    def clean_price(price_str):
        if isinstance(price_str, str):
            return float(price_str.replace('₹', '').replace(',', '').strip())
        return None

    df['discounted_price'] = df['discounted_price'].apply(clean_price)
    df['actual_price'] = df['actual_price'].apply(clean_price)
    df['discount_percentage'] = df['discount_percentage'].str.replace('%', '', regex=False).astype(float)
    df['rating'] = pd.to_numeric(df['rating'], errors='coerce')
    df['rating_count'] = df['rating_count'].str.replace(',', '', regex=False)
    df['rating_count'] = pd.to_numeric(df['rating_count'], errors='coerce')
    df[['category_level_1', 'category_level_2', 'category_level_3']] = df['category'].str.split('|', expand=True).iloc[:, :3]

    # --- Feature Engineering ---
    df['price_diff'] = df['actual_price'] - df['discounted_price']
    df['is_heavy_discount'] = (df['discount_percentage'] > 50).astype(int)
    df['product_name_length'] = df['product_name'].apply(lambda x: len(str(x)))
    df['about_word_count'] = df['about_product'].apply(lambda x: len(str(x).split()))

    feature_columns = ['discounted_price', 'discount_percentage', 'rating',
                       'price_diff', 'is_heavy_discount', 'product_name_length', 'about_word_count']
    df_model = df[feature_columns + ['rating_count']].dropna()

    quantiles = df_model['rating_count'].quantile([0.33, 0.66])
    def categorize_popularity(x):
        if x <= quantiles[0.33]:
            return 'Low'
        elif x <= quantiles[0.66]:
            return 'Medium'
        else:
            return 'High'
    df_model['popularity_class'] = df_model['rating_count'].apply(categorize_popularity)

    X = df_model[feature_columns]
    y = df_model['popularity_class']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # --- Classification Report ---
    st.subheader("📈 Classification Report")
    report = classification_report(y_test, y_pred, output_dict=True)
    st.dataframe(pd.DataFrame(report).transpose())

    # --- Confusion Matrix ---
    st.subheader("🔍 Confusion Matrix")
    cm = confusion_matrix(y_test, y_pred, labels=['Low', 'Medium', 'High'])
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=['Low', 'Medium', 'High'],
                yticklabels=['Low', 'Medium', 'High'], ax=ax)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Actual")
    st.pyplot(fig)